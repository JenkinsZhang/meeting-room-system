<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jenkins.common.bookingservice.mapper.BookingRecordMapper">
    <resultMap id="Base_Result_Map" type="com.jenkins.common.bookinginterface.entity.BookingRecord">
        <id property="record_id" column="record_id"/>
        <result property="room_id" column="room_id"/>
        <result property="start_time" column="start_time"/>
        <result property="end_time" column="end_time"/>
        <result property="booker_email" column="booker_email"/>
        <result property="status" column="status"/>
    </resultMap>

    <sql id="Base_Column_List">
        record_id,room_id,start_time,end_time,creation_time,booker_email,status
    </sql>

    <insert id="insertBookingRecord" parameterType="com.jenkins.common.bookinginterface.entity.BookingRecord">
        insert into bk_record(room_id,start_time,end_time,creation_time,booker_email,status)
        select  #{booking_record.room_id},
                #{booking_record.start_time},
                #{booking_record.end_time},#{booking_record.creation_time},#{booking_record.booker_email},#{booking_record.status} from DUAL where not exists
                (
                    select start_time,end_time,room_id from bk_record
                    where (
                        #{booking_record.start_time} between start_time and end_time and room_id = #{booking_record.room_id}
                    ) or
                    (
                        #{booking_record.end_time} between start_time and end_time and room_id = #{booking_record.room_id}
                    ) or
                    (
                        #{booking_record.start_time} &lt; start_time and #{booking_record.end_time} &gt; end_time
                        and room_id = #{booking_record.room_id}
                    )
                )
    </insert>

    <select id="selectBookingRecordByUserEmail" resultMap="Base_Result_Map">
        <bind name="offset" value="page*pageSize"/>
        select <include refid="Base_Column_List"/>,now()-start_time as sort
        from bk_record where booker_email = #{booker_email} and status in
        <foreach collection="filters" item="status" open="(" separator="," close=")">
                #{status}
        </foreach>
        order by if(sort&lt;0,0,1) asc,abs(sort) limit #{offset},#{pageSize}
    </select>

    <select id="countRecordByEmail" resultType="java.lang.Integer">
        select count(record_id) from bk_record where booker_email = #{bookerEmail} and status in
        <foreach collection="filters" item="status" open="(" separator="," close=")">
            #{status}
        </foreach>
    </select>
</mapper>